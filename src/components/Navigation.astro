---
import ResponsiveToggle from './ResponsiveToggle.astro'
import { DarkMode } from 'accessible-astro-components'
---


<div id="main-navigation" class="is-desktop py-8">
  <div class="container">
    <a href="/" class="flex items-center gap-2 !no-underline">
        <svg aria-label="Lotus Code" width="200" height="47" viewBox="0 0 269 27" fill="none" xmlns="http://www.w3.org/2000/svg">
          <path d="M0.458 26C0.179334 26 0.0400002 25.8607 0.0400002 25.582V1.528C0.0400002 1.24933 0.179334 1.11 0.458 1.11H3.498C3.75133 1.11 3.878 1.24933 3.878 1.528V22.58H14.138C14.4167 22.58 14.556 22.7193 14.556 22.998V25.582C14.556 25.8607 14.4167 26 14.138 26H0.458ZM19.9565 26C19.6525 26 19.5385 25.848 19.6145 25.544L27.9365 1.452C28.0125 1.224 28.1645 1.11 28.3925 1.11H32.4585C32.7118 1.11 32.8765 1.224 32.9525 1.452L41.3505 25.544C41.4011 25.6707 41.3885 25.7847 41.3125 25.886C41.2618 25.962 41.1605 26 41.0085 26H37.7405C37.4871 26 37.3225 25.886 37.2465 25.658L31.9265 9.242C31.6731 8.45667 31.4198 7.67133 31.1665 6.886C30.9131 6.07533 30.6598 5.27733 30.4065 4.492H30.3305C30.1025 5.27733 29.8618 6.06267 29.6085 6.848C29.3551 7.608 29.1018 8.38067 28.8485 9.166L23.6045 25.658C23.5285 25.886 23.3638 26 23.1105 26H19.9565ZM24.6305 20.452L25.4665 17.222H35.3085L36.1825 20.452H24.6305ZM57.1386 26.456C54.0986 26.456 51.7552 25.6833 50.1086 24.138C48.4872 22.5673 47.6766 20.2873 47.6766 17.298V1.528C47.6766 1.24933 47.8159 1.11 48.0946 1.11H51.0966C51.2232 1.11 51.3246 1.148 51.4006 1.224C51.4766 1.27467 51.5146 1.376 51.5146 1.528V17.298C51.5146 19.1473 51.9832 20.5787 52.9206 21.592C53.8832 22.6053 55.2892 23.112 57.1386 23.112C58.9879 23.112 60.3812 22.6053 61.3186 21.592C62.2812 20.5787 62.7626 19.1473 62.7626 17.298V1.528C62.7626 1.24933 62.8892 1.11 63.1426 1.11H66.1826C66.4612 1.11 66.6006 1.24933 66.6006 1.528V17.336C66.6006 20.224 65.7646 22.466 64.0926 24.062C62.4206 25.658 60.1026 26.456 57.1386 26.456ZM81.9701 26C81.6914 26 81.5521 25.8607 81.5521 25.582V4.53H74.8641C74.5854 4.53 74.4461 4.39067 74.4461 4.112V1.528C74.4461 1.24933 74.5854 1.11 74.8641 1.11H92.1161C92.3947 1.11 92.5341 1.24933 92.5341 1.528V4.112C92.5341 4.39067 92.3947 4.53 92.1161 4.53H85.3901V25.582C85.3901 25.8607 85.2507 26 84.9721 26H81.9701ZM109.826 26.456C106.786 26.456 104.443 25.6833 102.796 24.138C101.175 22.5673 100.364 20.2873 100.364 17.298V1.528C100.364 1.24933 100.504 1.11 100.782 1.11H103.784C103.911 1.11 104.012 1.148 104.088 1.224C104.164 1.27467 104.202 1.376 104.202 1.528V17.298C104.202 19.1473 104.671 20.5787 105.608 21.592C106.571 22.6053 107.977 23.112 109.826 23.112C111.676 23.112 113.069 22.6053 114.006 21.592C114.969 20.5787 115.45 19.1473 115.45 17.298V1.528C115.45 1.24933 115.577 1.11 115.83 1.11H118.87C119.149 1.11 119.288 1.24933 119.288 1.528V17.336C119.288 20.224 118.452 22.466 116.78 24.062C115.108 25.658 112.79 26.456 109.826 26.456ZM136.482 26.456C134.405 26.456 132.695 26.1647 131.352 25.582C130.035 24.974 129.072 24.138 128.464 23.074C127.881 21.9847 127.641 20.7053 127.742 19.236C127.767 18.8053 127.932 18.59 128.236 18.59H131.162C131.466 18.59 131.618 18.78 131.618 19.16C131.618 20.5533 132.036 21.5667 132.872 22.2C133.708 22.8333 135 23.15 136.748 23.15C138.42 23.15 139.674 22.8587 140.51 22.276C141.371 21.6933 141.802 20.8067 141.802 19.616C141.802 19.0333 141.701 18.5393 141.498 18.134C141.321 17.7033 140.991 17.3233 140.51 16.994C140.029 16.6647 139.395 16.3353 138.61 16.006L133.024 13.688C131.833 13.1813 130.871 12.624 130.136 12.016C129.427 11.408 128.907 10.7113 128.578 9.926C128.274 9.14067 128.122 8.24133 128.122 7.228C128.147 5.1 128.857 3.47867 130.25 2.364C131.669 1.24933 133.733 0.692 136.444 0.692C138.319 0.692 139.927 0.957999 141.27 1.49C142.638 2.022 143.651 2.80733 144.31 3.846C144.994 4.88467 145.273 6.164 145.146 7.684C145.095 8.14 144.943 8.368 144.69 8.368H141.726C141.599 8.368 141.498 8.31733 141.422 8.216C141.371 8.11467 141.359 7.93733 141.384 7.684C141.46 6.51867 141.055 5.60667 140.168 4.948C139.281 4.28933 138.015 3.96 136.368 3.96C134.924 3.96 133.835 4.226 133.1 4.758C132.365 5.26467 131.985 6.03733 131.96 7.076C131.96 7.63333 132.061 8.11467 132.264 8.52C132.467 8.92533 132.809 9.30533 133.29 9.66C133.771 10.0147 134.43 10.3693 135.266 10.724L140.776 13.042C141.967 13.5233 142.917 14.068 143.626 14.676C144.361 15.284 144.88 15.9807 145.184 16.766C145.488 17.5513 145.64 18.5013 145.64 19.616C145.64 21.7693 144.905 23.454 143.436 24.67C141.967 25.8607 139.649 26.456 136.482 26.456ZM152.15 26C151.694 26 151.542 25.7973 151.694 25.392L161.574 1.528C161.701 1.24933 161.916 1.11 162.22 1.11H166.628C167.059 1.11 167.198 1.31267 167.046 1.718L157.166 25.582C157.065 25.8607 156.849 26 156.52 26H152.15ZM180.647 26C180.495 26 180.419 25.9113 180.419 25.734V2.972H172.933C172.756 2.972 172.667 2.88333 172.667 2.706V1.376C172.667 1.19867 172.756 1.11 172.933 1.11H189.881C190.058 1.11 190.147 1.19867 190.147 1.376V2.706C190.147 2.88333 190.058 2.972 189.881 2.972H182.433V25.734C182.433 25.9113 182.344 26 182.167 26H180.647ZM199.306 26C199.129 26 199.04 25.9113 199.04 25.734V1.376C199.04 1.19867 199.129 1.11 199.306 1.11H212.682C212.86 1.11 212.948 1.19867 212.948 1.376V2.706C212.948 2.88333 212.86 2.972 212.682 2.972H201.054V12.396H211.808C211.986 12.396 212.074 12.4847 212.074 12.662V13.916C212.074 14.0933 211.986 14.182 211.808 14.182H201.054V24.138H212.682C212.86 24.138 212.948 24.2267 212.948 24.404V25.734C212.948 25.9113 212.86 26 212.682 26H199.306ZM231.579 26.456C228.615 26.456 226.347 25.7087 224.777 24.214C223.231 22.7193 222.459 20.604 222.459 17.868V9.242C222.459 6.506 223.244 4.39067 224.815 2.896C226.385 1.40133 228.653 0.653998 231.617 0.653998C233.542 0.653998 235.214 0.983332 236.633 1.642C238.051 2.27533 239.115 3.2 239.825 4.416C240.534 5.632 240.8 7.10133 240.623 8.824C240.597 8.9 240.559 8.976 240.509 9.052C240.483 9.128 240.42 9.166 240.319 9.166H238.837C238.634 9.166 238.558 9.07733 238.609 8.9C238.735 6.82267 238.165 5.23933 236.899 4.15C235.657 3.03533 233.909 2.478 231.655 2.478C229.349 2.478 227.576 3.06067 226.335 4.226C225.093 5.39133 224.473 7.06333 224.473 9.242V17.868C224.473 20.0467 225.093 21.7187 226.335 22.884C227.576 24.0493 229.349 24.632 231.655 24.632C233.96 24.632 235.721 24.0873 236.937 22.998C238.153 21.9087 238.71 20.3127 238.609 18.21C238.558 18.0327 238.634 17.944 238.837 17.944H240.319C240.471 17.944 240.572 18.058 240.623 18.286C240.724 19.9833 240.42 21.44 239.711 22.656C239.001 23.872 237.95 24.8093 236.557 25.468C235.189 26.1267 233.529 26.456 231.579 26.456ZM251.104 26C250.926 26 250.838 25.9113 250.838 25.734V1.376C250.838 1.19867 250.926 1.11 251.104 1.11H252.624C252.776 1.11 252.852 1.19867 252.852 1.376V12.244H266.798V1.376C266.798 1.19867 266.874 1.11 267.026 1.11H268.546C268.723 1.11 268.812 1.19867 268.812 1.376V25.734C268.812 25.9113 268.723 26 268.546 26H267.026C266.874 26 266.798 25.9113 266.798 25.734V14.03H252.852V25.734C252.852 25.9113 252.776 26 252.624 26H251.104Z" fill="var(--font-color)"/>
          </svg>
      <!-- <span class="font-bold">Accessible Astro</span> -->
    </a>
    <div class="wrapper">
      <nav class="desktop-menu" aria-label="Main navigation desktop">
        <ul class="menu">
          <slot />
        </ul>
      </nav>
      <DarkMode />
      <ResponsiveToggle />
    </div>
    <nav class="mobile-menu" aria-label="Main navigation mobile">
      <ul class="menu">
        <slot />
      </ul>
    </nav>
  </div>
</div>

<script>
  // variables
  const mainNav = document.querySelector('#main-navigation')
  const mainMenu = mainNav?.querySelector('ul')
  const dropdownMenus = [...document.querySelectorAll('.has-dropdown button')]

  // functions
  const setActiveMenuItem = () => {
    const mobileDesktopMenus = mainNav?.querySelectorAll('nav > ul')
    const currenPathname = window.location.pathname

    mobileDesktopMenus?.forEach((menu) => {
      const menuItems = [...menu.querySelectorAll('a:not([rel*="external"])')] as HTMLAnchorElement[]

      menuItems.forEach((menuItem) => {
        if (currenPathname.includes(menuItem.pathname.replaceAll('/', '')) && menuItem.textContent !== 'Home') {
          menuItem.classList.add('is-active')
          menuItem.setAttribute('aria-current', 'page')
        } else if (menuItem.textContent === 'Home' && currenPathname === '/') {
          menuItem.classList.add('is-active')
          menuItem.setAttribute('aria-current', 'page')
        }
      })
    })
  }

  const checkMenuSize = () => {
    const mainNavWidth = mainNav?.getBoundingClientRect().width
    const desktopMenuWidth = document?.querySelector('.desktop-menu')?.getBoundingClientRect().width
    const logoWidthBuffer = 300
    const totalMenuWidth = Math.round(desktopMenuWidth) + logoWidthBuffer

    if (totalMenuWidth >= mainNavWidth) {
      mainNav.classList.remove('is-desktop')
      mainNav.classList.add('is-mobile')
    } else if (totalMenuWidth <= mainNavWidth) {
      mainNav.classList.add('is-desktop')
      mainNav.classList.remove('is-mobile')
    }
  }

  const isOutOfViewport = (element) => {
    const elementBounds = element.getBoundingClientRect()
    return elementBounds.right > (window.innerWidth || document.documentElement.clientWidth)
  }

  const openDropdownMenu = (dropdownMenu) => {
    const dropdownList = dropdownMenu.parentNode.querySelector('ul')

    dropdownMenu.classList.add('show')
    dropdownMenu.setAttribute('aria-expanded', 'true')

    if (isOutOfViewport(dropdownList)) {
      dropdownList.style.left = 'auto'
    }
  }

  const closeDropdownMenu = (dropdownMenu) => {
    dropdownMenu.classList.remove('show')
    dropdownMenu.setAttribute('aria-expanded', 'false')
  }

  const closeAllDropdownMenus = () => {
    for (let i = 0; i < dropdownMenus.length; i++) {
      closeDropdownMenu(dropdownMenus[i])
    }
  }

  const toggleDropdownMenu = (event) => {
    if (event.target.getAttribute('aria-expanded') === 'false') {
      closeAllDropdownMenus()
      openDropdownMenu(event.target)
    } else {
      closeDropdownMenu(event.target)
    }
  }

  // execution
  mainMenu &&
    mainMenu.addEventListener('keydown', (event) => {
      const element = event.target as Element
      const currentMenuItem = element.closest('li')
      const menuItems = [...mainMenu.querySelectorAll('.menu-item')]
      const currentDropdownMenu = element.closest('.has-dropdown button')
      const currentDropdownMenuItem = element.closest('.has-dropdown li')
      const currentIndex = menuItems.findIndex((item) => item === currentMenuItem)

      const key = event.key
      let targetItem

      if (key === 'ArrowRight') {
        if (menuItems.indexOf(currentMenuItem) === menuItems.length - 1) {
          targetItem = menuItems[0]
        } else {
          targetItem = menuItems[currentIndex + 1]
        }
      }

      if (key === 'ArrowLeft') {
        if (menuItems.indexOf(currentMenuItem) === 0) {
          targetItem = menuItems[menuItems.length - 1]
        } else {
          targetItem = menuItems[currentIndex - 1]
        }
      }

      if (key === 'Escape') {
        targetItem = menuItems[0]
      }

      if (currentDropdownMenu) {
        const firstDropdownItem = currentDropdownMenu.nextElementSibling.querySelector('li')

        if (key === 'ArrowDown') {
          event.preventDefault()
          openDropdownMenu(currentDropdownMenu)
          targetItem = firstDropdownItem
        }

        if (key === 'Escape') {
          closeDropdownMenu(currentDropdownMenu)
        }
      }

      if (currentDropdownMenuItem) {
        const currentDropdownList = currentDropdownMenuItem.parentNode
        const dropdownMenuItems = [...currentDropdownList.querySelectorAll('li')]
        const currentIndex = dropdownMenuItems.findIndex((item) => item === currentDropdownMenuItem)

        if (key === 'ArrowDown') {
          event.preventDefault()

          if (dropdownMenuItems.indexOf(currentDropdownMenuItem as HTMLLIElement) === dropdownMenuItems.length - 1) {
            targetItem = dropdownMenuItems[0]
          } else {
            targetItem = dropdownMenuItems[currentIndex + 1]
          }
        }

        if (key === 'ArrowUp') {
          event.preventDefault()

          if (dropdownMenuItems.indexOf(currentDropdownMenuItem as HTMLLIElement) === 0) {
            targetItem = dropdownMenuItems[dropdownMenuItems.length - 1]
          } else {
            targetItem = dropdownMenuItems[currentIndex - 1]
          }
        }

        if (key === 'Escape') {
          const currentDropdownMenu = (currentDropdownList as Element).previousElementSibling
          targetItem = currentDropdownMenu.parentNode
          closeAllDropdownMenus()
        }
      }

      if (targetItem) {
        targetItem.querySelector('a, button, input').focus()
      }
    })

  dropdownMenus &&
    dropdownMenus.forEach((dropdownMenu) => {
      dropdownMenu.addEventListener('click', toggleDropdownMenu)
    })

  setActiveMenuItem()
  checkMenuSize()

  window.addEventListener('resize', checkMenuSize)
  window.addEventListener('click', (event) => {
    const element = event.target as Element
    if (!element.hasAttribute('aria-haspopup') && !element.classList.contains('submenu-item')) {
      closeAllDropdownMenus()
    }
  })
</script>

<style lang="scss" is:global>
  @use '../assets/scss/base/breakpoint' as *;
  @use '../assets/scss/base/outline' as *;

  #main-navigation {
    > .container {
      display: flex;
      justify-content: space-between;
      flex-wrap: wrap;
    }

    &.is-desktop {
      .desktop-menu {
        visibility: visible;
        position: static;
      }

      .mobile-menu {
        display: none;
      }

      .darkmode-toggle {
        margin-top: -6px;
      }
    }

    &.is-mobile {
      flex-direction: column;

      .mobile-menu {
        display: none;

        &.show {
          display: block;
        }
      }

      .desktop-menu {
        visibility: hidden;
        z-index: -99;
        position: absolute;
        left: 0;
      }

      .responsive-toggle {
        display: block;
      }
    }

    .wrapper {
      display: flex;
      align-items: center;
      gap: 1rem;
    }

    nav {
      > ul {
        display: flex;
        gap: 1.5rem;
        list-style-type: none;

        a,
        button {
          text-decoration: none;
          font-size: 1.125rem;
          line-height: 1.6875rem;
          transition: color 0.15s ease-in-out;
        }

        a:hover,
        a:focus,
        .is-active,
        .has-dropdown > button:hover,
        .has-dropdown > button:focus {
          text-decoration: underline;
          text-decoration-thickness: 1px;
          text-decoration-style: wavy;
          text-underline-offset: 7px;
        }

        .is-active {
          font-weight: bold;
        }
      }
    }

    .mobile-menu {
      flex-basis: 100%;
      padding: 2rem 0;

      > ul {
        flex-direction: column;

        ul {
          position: relative;
          margin-top: 1rem;
        }
      }

      a,
      button {
        display: block;
        width: 100%;
        padding: 0.5rem 0;
      }
    }

    .has-dropdown {
      position: relative;

      > button {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        padding: 0;
        margin-top: -1px;
        border: none;
        color: var(--action-color);

        &:hover {
          color: var(--action-color-state);

          &::after {
            border-color: var(--action-color-state);
          }
        }

        &::after {
          content: '';
          width: 0.85rem;
          height: 0.75em;
          margin-top: -0.25rem;
          border-style: solid;
          border-width: 0.2em 0.2em 0 0;
          border-color: var(--action-color);
          transform: rotate(135deg);
        }

        &.show {
          &::after {
            margin-top: 0.25rem;
            transform: rotate(-45deg);
          }

          ~ ul {
            display: flex;
            flex-direction: column;
            gap: 1rem;
          }
        }
      }

      ul {
        display: none;
        position: absolute;
        z-index: 100;
        min-width: 260px;
        top: 125%;
        right: 0;
        bottom: auto;
        left: 0;
        padding: 1rem;
        background-color: var(--neutral-background);
        border: 2px solid black;
        box-shadow: 0 10px 20px rgba(0, 0, 0, 0.15);
      }
    }
  }

  .darkmode-toggle {
    padding: 0;
    border: none;

    svg {
      width: 30px;
      margin-top: 4px;
    }

    svg path {
      fill: var(--action-color);
      transition: fill 0.2s ease-in-out;
    }

    &:hover {
      svg path {
        fill: var(--action-color-state);
      }
    }

    &:focus {
      @include outline;

      &:not(:focus-visible) {
        outline: none;
        box-shadow: none;
      }
    }
  }
</style>
